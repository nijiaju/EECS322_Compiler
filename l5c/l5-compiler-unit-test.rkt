#lang plai

(require rackunit "l5-compiler.rkt" "l5-parser.rkt" "../l4c/l4-format.rkt")
(require "l5-definition.rkt")

(check-equal? (find-free-vars (set) (set) (l5parse '1)) (set))
(check-equal? (find-free-vars (set) (set) (l5parse 'x)) (set 'x))
(check-equal? (find-free-vars (set) (set) (l5parse '(let ([x 1]) y))) (set 'y))
(check-equal? (find-free-vars (set) (set) (l5parse '(let ([x 1]) x))) (set))
(check-equal? (find-free-vars (set) (set) (l5parse '(let ([x x]) x))) (set 'x))
(check-equal? (find-free-vars (set) (set) (l5parse '(letrec ([x x]) x))) (set))
(check-equal? (find-free-vars (set) (set) (l5parse '(if x x x))) (set 'x))
(check-equal? (find-free-vars (set 'x) (set) (l5parse '(if x x x))) (set))
(check-equal? (find-free-vars (set 'x) (set) (l5parse '(if x y z))) (set 'y 'z))
(check-equal? (find-free-vars (set 'x) (set) (l5parse '(new-tuple x y z))) (set 'y 'z))
(check-equal? (find-free-vars (set 'x) (set) (l5parse '(new-tuple))) (set))
(check-equal? (find-free-vars (set 'x) (set) (l5parse '(begin x y))) (set 'y))
(check-equal? (find-free-vars (set) (set) (l5parse '(x y))) (set 'x 'y))
(check-equal? (find-free-vars (set 'x) (set) (l5parse '(x y))) (set 'y))
(check-equal? (find-free-vars (set) (set) (l5parse '(x))) (set 'x))
(check-equal? (find-free-vars (set 'x) (set) (l5parse '(x))) (set))
(check-equal? (find-free-vars (set 'x 'y) (set) (l5parse '(lambda (a b) x))) (set))
(check-equal? (find-free-vars (set 'x 'y) (set) (l5parse '(lambda (a b) z))) (set))
(check-equal? (find-free-vars (set 'x) (set)
                              (l5parse '(let ([f (lambda (y) z)])
                                          (f x))))
              (set))

(displayln (format-l4-prog (l5-compiler (l5parse '(lambda (x) x)) empty)))